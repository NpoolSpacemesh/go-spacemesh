// Code generated by MockGen. DO NOT EDIT.
// Source: ./0003_migration_interfaces.go
//
// Generated by this command:
//
//	mockgen -typed -package=localsql -destination=./mocks.go -source=./0003_migration_interfaces.go
//
// Package localsql is a generated GoMock package.
package localsql

import (
	context "context"
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockpoetClient is a mock of poetClient interface.
type MockpoetClient struct {
	ctrl     *gomock.Controller
	recorder *MockpoetClientMockRecorder
}

// MockpoetClientMockRecorder is the mock recorder for MockpoetClient.
type MockpoetClientMockRecorder struct {
	mock *MockpoetClient
}

// NewMockpoetClient creates a new mock instance.
func NewMockpoetClient(ctrl *gomock.Controller) *MockpoetClient {
	mock := &MockpoetClient{ctrl: ctrl}
	mock.recorder = &MockpoetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpoetClient) EXPECT() *MockpoetClientMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockpoetClient) Address() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Address indicates an expected call of Address.
func (mr *MockpoetClientMockRecorder) Address() *poetClientAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockpoetClient)(nil).Address))
	return &poetClientAddressCall{Call: call}
}

// poetClientAddressCall wrap *gomock.Call
type poetClientAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *poetClientAddressCall) Return(arg0 string, arg1 error) *poetClientAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *poetClientAddressCall) Do(f func() (string, error)) *poetClientAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *poetClientAddressCall) DoAndReturn(f func() (string, error)) *poetClientAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PoetServiceID mocks base method.
func (m *MockpoetClient) PoetServiceID(ctx context.Context) (types.PoetServiceID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoetServiceID", ctx)
	ret0, _ := ret[0].(types.PoetServiceID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoetServiceID indicates an expected call of PoetServiceID.
func (mr *MockpoetClientMockRecorder) PoetServiceID(ctx any) *poetClientPoetServiceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoetServiceID", reflect.TypeOf((*MockpoetClient)(nil).PoetServiceID), ctx)
	return &poetClientPoetServiceIDCall{Call: call}
}

// poetClientPoetServiceIDCall wrap *gomock.Call
type poetClientPoetServiceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *poetClientPoetServiceIDCall) Return(arg0 types.PoetServiceID, arg1 error) *poetClientPoetServiceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *poetClientPoetServiceIDCall) Do(f func(context.Context) (types.PoetServiceID, error)) *poetClientPoetServiceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *poetClientPoetServiceIDCall) DoAndReturn(f func(context.Context) (types.PoetServiceID, error)) *poetClientPoetServiceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
