// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package bootstrap

import (
	"github.com/spacemeshos/go-scale"
)

func (t *InnerData) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.ID))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.Epochs)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *InnerData) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.ID = uint32(field)
	}
	{
		field, n, err := scale.DecodeStructSlice[EpochData](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Epochs = field
	}
	return total, nil
}

func (t *EpochData) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.Epoch))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeString(enc, string(t.Beacon))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStringSlice(enc, t.ActiveSet)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *EpochData) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Epoch = uint32(field)
	}
	{
		field, n, err := scale.DecodeString(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Beacon = string(field)
	}
	{
		field, n, err := scale.DecodeStringSlice(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.ActiveSet = field
	}
	return total, nil
}
